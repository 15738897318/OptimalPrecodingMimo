function defaultSimParamStruct = createDefaultSimParamStruct
%
% CREATEDEFAULTSIMPARAMSTRUCT Create a struct of sim params containing
% default values for sim params, which will be overriden later by specific 
% sim case params.
%
%     Inputs:     --
%     Outputs:    struct defaultSimParamStruct = default struct of sim params
%
% Max Girnyk
% Stockholm, 2014-10-01
%
% =========================================================================
%
% This Matlab script produces results used in the following paper:
%
% M. A. Girnyk, "Deep-learning based linear precoding for MIMO channels 
% with finite-alphabet signaling," Physical Communication 48(2021) 101402
%
% Paper URL:          https://arxiv.org/abs/2111.03504
%
% Version:            1.0 (modified 2021-11-14)
%
% License:            This code is licensed under the Apache-2.0 license. 
%                     If you use this code in any way for research that
%                     results in a publication, please cite the above paper
%
% =========================================================================

% Default sim params list =================================================

% Signal-related params ---------------------------------------------------
typeModulation          = 'BPSK';               % modulation scheme: 'BPSK', 'QPSK', '16QAM', '64QAM', 'GAUSS'

% Channel-related params --------------------------------------------------
H                       = [2 1; 1 1];           % channel from Palomar-Verdu paper
channelMatReal          = real(H);              % separation needed to allow using JSON logs
channelMatImag          = imag(H);
[N, M]                  = size(H);              % sizes of the cannel matrix
channelFadingTag        = 'PalomarVerdu';       % channel fading tag
channelTag              = [num2str(M), 'x', num2str(N), channelFadingTag];
snrDbMax                = 20;                   % higher SNR in dB
snrDbMin                = -10;                  % lower SNR in dB
nSnrPoints              = 15;                   % number of SNR points in dB
snrDbVec                = linspace(snrDbMin, snrDbMax, nSnrPoints);

% Cluster-related params --------------------------------------------------
runOnCluster            = 0;                    % flag for running on the cluster/locally
currentDateFormat       = 'yymmddHHMMSS';
currentTimeStamp        = datestr(now, currentDateFormat);
simId                   = str2double(currentTimeStamp);     % ID for the entire sim
simName                 = currentTimeStamp;       % ID for the entire sim
simDataPath             = [pwd, '\SimData'];
simFolderPath           = [simDataPath, '\', simName];
nMiValuesBuffer         = 12;                   % buffer for MI values displayed in a row
logValuesToFile         = 0;                    % log MI, MMSE and time in a file
evaluateTrueMiMeanwhile = 0;                    % compute true QAM MI during optimization
nOrderCasesMax          = 3;                    % Max order of the number of cases allowed (how many 9s, e.g., 999)
comment                 = '';                   % descriptive comment for future reference
createDataset           = 0;                    % Create dataset for further analysis?

% Optimiation-related params ----------------------------------------------
nItersMax               = 1e3;                  % number of iterations of algorithm
nNoImprovementsMax      = 15;                   % max value of no-improvements counter to back-off
nBackOffsMax            = 5;                    % max value of back-offs to indicate convergence
backOffSize             = 1.5;                  % size of the back-off as compared to gradient ascent
stepThresholdPercent    = 1e-3;                 % threshold for accepting new MI value as a fraction to the current opt value 
a                       = 1;                    % forgetting parameter for MMSE computation
alpha_W                 = 0.6;                  % backtacking-search param for W
beta_W                  = 0.9;                  % backtacking-search bisection for W
alpha_G                 = 0.5;                  % backtacking-search param for Sigma_G
beta_G                  = 0.75;                 % backtacking-search bisection for Sigma_G

% Computation-related params ----------------------------------------------
methodSamplingMi        = 'EXHAUSTIVE';         % method of sampling signal vectors: EXHAUSTIVE/RANDOMIZED
methodComputationMi     = 'GAUSS_CAPPED';       % method of computation of the MI: %'GAUSS_CAPPED'; %'TRUE'; 'ZHANG_CHEN_TAN'; 'ZHU_SHI_FARHANG';%'KRASKOV_STOGBAUER_GRASSBERGER'; 'HAMMING_DISTANCE_1'
methodSamplingMmse      = 'EXHAUSTIVE';         % method of sampling signal vectors: EXHAUSTIVE/RANDOMIZED
methodComputationMmse   = 'GAUSS';              % method of computation of the MI
nItersSignalMi          = 1e3;                  % size of the inner loop for MI computation
nItersNoiseMi           = 1e3;                  % size of the outer loop for MI computation
nItersSignalMmse        = 1e3;                  % size of the inner loop for MMSE computation
nItersNoiseMmse         = 1e3;                  % size of the outer loop for MMSE computation

% Plot-related params -----------------------------------------------------
legendEntry             = 'Gaussian capped';    % name in the legend
lineType                = '-';                  % line type
lineMarker              = 'o';                  % line marker
lineColor               = 'k';                  % line color

% Group params into a struct ==============================================
cluster = struct(...
  'runOnCluster', runOnCluster,...
  'simName', simName,...
  'simId', simId,...
  'simDataPath', simDataPath,...
  'simFolderPath', simFolderPath,...
  'nMiValuesBuffer', nMiValuesBuffer,...
  'logValuesToFile', logValuesToFile,...
  'evaluateTrueMiMeanwhile', evaluateTrueMiMeanwhile,...
  'nOrderCasesMax', nOrderCasesMax,...
  'comment', comment,...
  'createDataset', createDataset...
  );

signaling = struct(...
  'typeModulation', typeModulation...
  );

channel = struct(...
  'channelMatReal', channelMatReal,...
  'channelMatImag', channelMatImag,...
  'nTxAntennas', M,...
  'nRxAntennas', N,...
  'channelTag', channelTag,...
  'snrDbVec', snrDbVec...
  );

optimization = struct(...
  'nItersMax', nItersMax,...
  'nNoImprovementsMax', nNoImprovementsMax,...
  'nBackOffsMax', nBackOffsMax,...
  'backOffSize', backOffSize,...
  'stepThresholdPercent', stepThresholdPercent,...
  'forgettingParamMmse', a,...
  'toleranceBacktrackingDirection', alpha_W,...
  'stepLengthBacktrackingDirection', beta_W,...
  'toleranceBacktrackingPower', alpha_G,...
  'stepLengthBacktrackingPower', beta_G...
  );

computation = struct(...
  'methodSamplingMi', methodSamplingMi,...
  'methodComputationMi', methodComputationMi,...
  'methodSamplingMmse', methodSamplingMmse,...
  'methodComputationMmse', methodComputationMmse,...
  'nItersSignalMi', nItersSignalMi,...
  'nItersNoiseMi', nItersNoiseMi,...
  'nItersSignalMmse', nItersSignalMmse,...
  'nItersNoiseMmse', nItersNoiseMmse...
  );

plotting = struct(...
  'legendEntry', legendEntry,...
  'lineType', lineType,...
  'lineMarker', lineMarker,...
  'lineColor', lineColor...
  );

% Create default sim params structure =====================================
defaultSimParamStruct = struct(...
  'cluster', cluster,...
  'signaling', signaling,...
  'channel', channel,...
  'optimization', optimization,...
  'computation', computation,...
  'plotting', plotting...
  );

end